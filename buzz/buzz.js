// Generated by CoffeeScript 1.4.0
(function() {
  var BuzzGame, Layer, LayerList, LayerOptions, Loader, Map, ciderStuff, uniqueLayerId,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Map = (function() {

    function Map(data, options) {
      this.data = data;
      if (options == null) {
        options = {};
      }
      if (!this.data) {
        throw new Error('Cider Maps require an array containing map data');
      }
      this.type = c.mapType.regular;
      this.distance = 1;
      c.extend(this, options);
      if (this.type !== c.mapType.collision && !this.tileset) {
        throw new Error('Non-collision Cider Maps require a tileset.');
      }
    }

    return Map;

  })();

  /* --------------------------------------------
       Begin loader.coffee
  --------------------------------------------
  */


  Loader = (function() {

    function Loader(parent, resources, resourcesPrefix) {
      var key, val, _ref;
      this.parent = parent;
      this.resources = resources != null ? resources : {};
      this.resourcesPrefix = resourcesPrefix != null ? resourcesPrefix : '';
      this._updateComplete = __bind(this._updateComplete, this);

      this._imageError = __bind(this._imageError, this);

      this._imageLoaded = __bind(this._imageLoaded, this);

      this._soundError = __bind(this._soundError, this);

      this._soundLoaded = __bind(this._soundLoaded, this);

      this._loadSound = __bind(this._loadSound, this);

      this._initializeResource = __bind(this._initializeResource, this);

      this.percentComplete = 0;
      this.completed = 0;
      this.resourceCount = Object.keys(this.resources).length;
      _ref = this.resources;
      for (key in _ref) {
        val = _ref[key];
        this._initializeResource(key, val);
      }
    }

    Loader.prototype._initializeResource = function(key, val) {
      var audioElement, imgElement, resourceUrl, sourceElement, _i, _len;
      if (Array.isArray(val)) {
        audioElement = new Audio();
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          resourceUrl = val[_i];
          sourceElement = document.createElement('source');
          sourceElement.src = this.resourcesPrefix + resourceUrl;
          audioElement.appendChild(sourceElement);
        }
        audioElement.addEventListener('canplaythrough', this._soundLoaded);
        audioElement.addEventListener('error', this._soundError);
        this._loadSound(audioElement);
        return this.resources[key] = audioElement;
      } else {
        imgElement = new Image();
        imgElement.addEventListener('load', this._imageLoaded);
        imgElement.addEventListener('error', this._imageError);
        imgElement.src = this.resourcesPrefix + val;
        return this.resources[key] = imgElement;
      }
    };

    Loader.prototype._loadSound = function(el) {
      document.body.appendChild(el);
      el.volume = 0;
      return el.play();
    };

    Loader.prototype._soundLoaded = function(e) {
      var el;
      el = e.target;
      el.pause();
      el.currentTime = 0;
      el.removeEventListener('canplaythrough', this._soundLoad);
      el.removeEventListener('error', this._soundError);
      return this._updateComplete();
    };

    Loader.prototype._soundError = function(e) {
      var el, src;
      el = e.target;
      el.removeEventListener('canplaythrough', this._soundLoad);
      el.removeEventListener('error', this._soundError);
      src = el.firstChild.src;
      throw new Error("" + (src.substr(0, src.lastIndexOf('.'))) + " failed to load.");
      return this._updateComplete();
    };

    Loader.prototype._imageLoaded = function(e) {
      var el;
      el = e.target;
      el.removeEventListener('load', this._imageLoaded);
      el.removeEventListener('error', this._imageError);
      return this._updateComplete();
    };

    Loader.prototype._imageError = function(e) {
      var el;
      el = e.target;
      el.removeEventListener('load', this._imageLoaded);
      el.removeEventListener('error', this._imageError);
      throw new Error("" + el.src + " failed to load.");
    };

    Loader.prototype._updateComplete = function() {
      var el, name, _ref, _ref1;
      this.completed++;
      this.percentComplete = Math.round(this.completed / this.resourceCount * 100);
      if (this.percentComplete === 100) {
        _ref = this.resources;
        for (name in _ref) {
          el = _ref[name];
          if (el.tagName === 'AUDIO') {
            el.volume = 1;
          }
        }
        return (_ref1 = this.parent) != null ? typeof _ref1.ready === "function" ? _ref1.ready() : void 0 : void 0;
      }
    };

    return Loader;

  })();

  /* --------------------------------------------
       Begin init.coffee
  --------------------------------------------
  */


  ciderStuff = {
    mapType: Object.freeze({
      regular: 0,
      collision: 1
    }),
    extend: function(dest) {
      var key, source, val, _i, _len, _ref;
      _ref = Array.prototype.slice.call(arguments, 1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        for (key in source) {
          val = source[key];
          dest[key] = val;
        }
      }
      return dest;
    }
  };

  window.c = window.Cider = ciderStuff;

  /* --------------------------------------------
       Begin buzzGame.coffee
  --------------------------------------------
  */


  BuzzGame = (function() {

    function BuzzGame() {}

    return BuzzGame;

  })();

  /* --------------------------------------------
       Begin layerList.coffee
  --------------------------------------------
  */


  LayerList = (function() {

    LayerList.prototype._layerTemplate = function(layer) {
      return $("<li data-layer-id=\"" + layer.id + "\" class=\"layer group\">\n	<input type=\"checkbox\" class=\"toggle-visibility\" " + (layer.visible ? 'checked' : '') + ">\n	<span class=\"name\">" + layer.name + "</span>\n	<button class=\"delete\">&times;</button>\n</li>");
    };

    function LayerList() {
      this.addLayer = __bind(this.addLayer, this);

      this.toggleLayerVisibility = __bind(this.toggleLayerVisibility, this);

      this.deleteLayer = __bind(this.deleteLayer, this);

      this.toggleActiveLayer = __bind(this.toggleActiveLayer, this);

      this.bindEvents = __bind(this.bindEvents, this);
      this.el = $('#layer-list');
      this.bindEvents();
    }

    LayerList.prototype.bindEvents = function() {
      this.el.on('click', '.layer', this.toggleActiveLayer);
      this.el.on('click', '.layer .delete', this.deleteLayer);
      this.el.on('click', '#add-layer', this.addLayer);
      this.el.on('change', '.layer .toggle-visibility', this.toggleLayerVisibility);
      return this.el.on('click', '.layer .toggle-visibility', this.stopPropagation);
    };

    LayerList.prototype.stopPropagation = function(e) {
      return e.stopPropagation();
    };

    LayerList.prototype.toggleActiveLayer = function(e) {
      var layer, layerEl;
      layerEl = $(e.currentTarget);
      if (layerEl.hasClass('current')) {
        return;
      }
      layerEl.addClass('current').siblings().removeClass('current');
      layer = window.buzz.layers[parseInt(layerEl.data('layer-id'), 10)];
      return window.buzz.layerOptions.load(layer);
    };

    LayerList.prototype.deleteLayer = function(e) {
      var layer, layerEl, layerId;
      e.stopPropagation();
      layerEl = $(e.currentTarget).parent();
      layerId = parseInt(layerEl.data('layer-id'), 10);
      layer = window.buzz.layers[layerId];
      window.buzz.layerOptions.unload(layer);
      delete window.buzz.layers[layerId];
      layerEl.off();
      return layerEl.slideUp(180, function() {
        return layerEl.remove();
      });
    };

    LayerList.prototype.toggleLayerVisibility = function(e) {
      var clicked, layer, layerEl;
      clicked = $(e.currentTarget);
      layerEl = clicked.parent();
      layer = window.buzz.layers[parseInt(layerEl.data('layer-id'), 10)];
      return layer.visible = !!clicked.prop('checked');
    };

    LayerList.prototype.addLayer = function() {
      var layer, listEl;
      layer = new window.buzz.Layer;
      listEl = this._layerTemplate(layer);
      listEl.on('updateName', function() {
        return listEl.find('.name').text(layer.name);
      });
      layer.listEl = listEl;
      window.buzz.layers[layer.id] = layer;
      return this.el.find('ul').append(listEl);
    };

    return LayerList;

  })();

  /* --------------------------------------------
       Begin layer.coffee
  --------------------------------------------
  */


  uniqueLayerId = 1;

  Layer = (function() {

    function Layer(options) {
      this.name = 'New Layer';
      this.type = c.mapType.regular;
      this.distance = 1;
      this.zIndex = 1;
      this.visible = true;
      this.id = uniqueLayerId++;
      c.extend(this, options);
    }

    return Layer;

  })();

  /* --------------------------------------------
       Begin layerOptions.coffee
  --------------------------------------------
  */


  LayerOptions = (function() {

    LayerOptions.prototype._template = function(layer) {
      return $("<ul class=\"options-container\">\n	<li>\n		<div class=\"key\">Name</div>\n		<div class=\"val\">\n			<input value=\"" + (layer.name ? layer.name : void 0) + "\" type=\"text\" class=\"name\">\n		</div>\n	</li>\n	<li>\n		<div class=\"key\">Type</div>\n		<div class=\"val\">\n			<select class=\"type\">\n				<option " + (layer.type === c.mapType.collision ? 'selected' : void 0) + " value=\"" + c.mapType.collision + "\">collision</option>\n				<option " + (layer.type === c.mapType.regular ? 'selected' : void 0) + " value=\"" + c.mapType.regular + "\">regular</option>\n			</select>\n		</div>\n	</li>\n	<li>\n		<div class=\"key\">Tile Size</div>\n		<div class=\"val\">\n			<input value=\"" + (layer.tileSize ? layer.tileSize : void 0) + "\" type=\"number\" class=\"tileSize\">\n		</div>\n	</li>\n	<li>\n		<div class=\"key\">Distance</div>\n		<div class=\"val\">\n			<input value=\"" + (layer.distance ? layer.distance : void 0) + "\" type=\"number\" class=\"distance\">\n		</div>\n	</li>\n	<li>\n		<div class=\"key\">Tileset</div>\n		<div class=\"val\">\n			<select class=\"tileset\">\n				<option>some tileset</option>\n				<option>another tileset</option>\n				<option>a third tileset</option>\n			</select>\n		</div>\n	</li>\n	<li>\n		<div class=\"key\">zIndex</div>\n		<div class=\"val\">\n			<input value=\"" + (layer.zIndex ? layer.zIndex : void 0) + "\" type=\"number\" class=\"zIndex\">\n		</div>\n	</li>\n</ul>");
    };

    function LayerOptions() {
      this.updateLayerZindex = __bind(this.updateLayerZindex, this);

      this.updateLayerTileset = __bind(this.updateLayerTileset, this);

      this.updateLayerDistance = __bind(this.updateLayerDistance, this);

      this.updateLayerTileSize = __bind(this.updateLayerTileSize, this);

      this.updateLayerType = __bind(this.updateLayerType, this);

      this.updateLayerName = __bind(this.updateLayerName, this);

      this.unload = __bind(this.unload, this);

      this.load = __bind(this.load, this);

      this.bindEvents = __bind(this.bindEvents, this);
      this.el = $('#selected-options');
      this.bindEvents();
    }

    LayerOptions.prototype.bindEvents = function() {
      this.el.on('change', '.name', this.updateLayerName);
      this.el.on('change', '.type', this.updateLayerType);
      this.el.on('change', '.tileSize', this.updateLayerTileSize);
      this.el.on('change', '.distance', this.updateLayerDistance);
      this.el.on('change', '.tileset', this.updateLayerTileset);
      return this.el.on('change', '.zIndex', this.updateLayerZindex);
    };

    LayerOptions.prototype.load = function(layer) {
      this.layer = layer;
      if (!this.layer) {
        throw 'LayerOptions requires a layer';
      }
      return this.el.html(this._template(layer));
    };

    LayerOptions.prototype.unload = function(layer) {
      if (layer !== this.layer) {
        return;
      }
      this.layer = null;
      return this.el.html('');
    };

    LayerOptions.prototype.updateLayerName = function(e) {
      var changed;
      changed = $(e.target);
      this.layer.name = changed.val();
      return this.layer.listEl.trigger('updateName');
    };

    LayerOptions.prototype.updateLayerType = function(e) {
      var changed;
      changed = $(e.target);
      return this.layer.type = parseInt(changed.val(), 10);
    };

    LayerOptions.prototype.updateLayerTileSize = function(e) {
      var changed;
      changed = $(e.target);
      return this.layer.tileSize = parseInt(changed.val(), 10);
    };

    LayerOptions.prototype.updateLayerDistance = function(e) {
      var changed;
      changed = $(e.target);
      return this.layer.distance = parseInt(changed.val(), 10);
    };

    LayerOptions.prototype.updateLayerTileset = function(e) {
      return this.layer.tileSet = $(e.target).val();
    };

    LayerOptions.prototype.updateLayerZindex = function(e) {
      var changed;
      changed = $(e.target);
      return this.layer.zIndex = parseInt(changed.val(), 10);
    };

    return LayerOptions;

  })();

  /* --------------------------------------------
       Begin buzz.coffee
  --------------------------------------------
  */


  $(document).ready(function() {
    var kicker;
    window.buzz = {
      layers: {},
      layerOptions: new LayerOptions(),
      Layer: Layer,
      Loader: Loader
    };
    $.ajax({
      url: 'config.json',
      success: function(config) {
        if (!(config && config.resources)) {
          console.error('Set up config.json (in the buzz directory) with appropriate values. An appropriate config file looks something like this:', {
            "resourcesPrefix": "../",
            "resources": {
              "box": "img/box.png",
              "bg tiles": "img/bgtiles.png",
              "fg tiles": "img/fgtiles.png",
              "stars": "img/stars.gif"
            }
          });
        }
        new window.buzz.Loader(kicker, config.resources, config.resourcesPrefix);
        return window.buzz.resources = config.resources;
      }
    });
    return kicker = {
      ready: function() {
        console.log('all loaded', window.buzz.resources);
        return new LayerList();
      }
    };
  });

}).call(this);
